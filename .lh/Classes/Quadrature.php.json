{
    "sourceFile": "Classes/Quadrature.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1759219719974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759225052090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,25 +240,25 @@\n     {\r\n         $dbm = new DBM();\r\n         return $dbm->read($this->query);\r\n     }\r\n-    private function generateQuery()\r\n-    {\r\n-        $sql = \"SELECT * FROM quad$this->year\";\r\n-        if (($this->distanza != \"*\") || ($this->tripla != \"*\")) {\r\n-            $sql .= \" WHERE\";\r\n-        }\r\n-        if ($this->distanza != \"*\") {\r\n-            $sql .= \" distanza IN (\";\r\n-            foreach ($this->distanza as $key)\r\n-                $sql .= \"\\'$key',\";\r\n-            $sql = substr($sql, 0, strlen($sql) - 1) . \")\";\r\n-        }\r\n-        if ($this->tripla != \"*\") {\r\n-            if ($this->distanza != \"*\")\r\n-                $sql .= \" AND tripla = \\'$this->tripla\\'\";\r\n-            else\r\n-                $sql .= \" tripla = '$this->tripla'\";\r\n-        }\r\n-        $this->query = $sql;\r\n+  private function generateQuery()\r\n+{\r\n+    $sql = \"SELECT * FROM quad$this->year\";\r\n+    if (($this->distanza != \"*\") || ($this->tripla != \"*\")) {\r\n+        $sql .= \" WHERE\";\r\n     }\r\n+    if ($this->distanza != \"*\") {\r\n+        $sql .= \" distanza IN (\";\r\n+        foreach ($this->distanza as $key)\r\n+            $sql .= \"'$key',\";\r\n+        $sql = substr($sql, 0, strlen($sql) - 1) . \")\";\r\n+    }\r\n+    if ($this->tripla != \"*\") {\r\n+        if ($this->distanza != \"*\")\r\n+            $sql .= \" AND tripla = '$this->tripla'\";\r\n+        else\r\n+            $sql .= \" tripla = '$this->tripla'\";\r\n+    }\r\n+    $this->query = $sql;\r\n+}\r\n } ?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759225629536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+<?php\r\n+<?php\r\n+\r\n+class Quadrature\r\n+{\r\n+    private $year;\r\n+    private $distanza;\r\n+    private $tripla;\r\n+    private $isotopi;\r\n+    private $query;\r\n+\r\n+    /**\r\n+     * Quadrature constructor.\r\n+     * @param int|string $year\r\n+     * @param array|string $distanza\r\n+     * @param string $tripla\r\n+     * @param bool $isotopi\r\n+     */\r\n+    public function __construct($year, $distanza, $tripla, $isotopi = false)\r\n+    {\r\n+        $this->year = $year;\r\n+        $this->distanza = $distanza;\r\n+        $this->tripla = $tripla;\r\n+        $this->isotopi = $isotopi;\r\n+        $this->generateQuery();\r\n+    }\r\n+\r\n+    public function getQuadrature()\r\n+    {\r\n+        $values = $this->getValues();\r\n+        $max = count($values) - 1;\r\n+        $res = [\r\n+            \"destroso\" => [],\r\n+            \"sinistroso\" => []\r\n+        ];\r\n+        for ($i = 0; $i < $max; $i++) {\r\n+            for ($j = $i + 1; $j <= $max; $j++) {\r\n+                if ($this->isotopi && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"])) {\r\n+                    continue;\r\n+                }\r\n+                // Destroso\r\n+                if ($values[$i][\"val1\"] < $values[$i][\"val2\"] && $values[$j][\"val1\"] > $values[$j][\"val2\"] && $values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n+                    $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$i][\"val2\"] < $values[$j][\"val2\"] && $values[$i][\"val1\"] > $values[$j][\"val1\"] && $values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n+                    $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val2\"] < $values[$j][\"val1\"] && $values[$i][\"val2\"] > $values[$i][\"val1\"] && $values[$i][\"val1\"] > $values[$j][\"val2\"]) {\r\n+                    $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val1\"] < $values[$i][\"val1\"] && $values[$j][\"val2\"] > $values[$i][\"val2\"] && $values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n+                    $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+                // Sinistroso\r\n+                if ($values[$i][\"val1\"] > $values[$i][\"val2\"] && $values[$j][\"val1\"] < $values[$j][\"val2\"] && $values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n+                    $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$i][\"val2\"] > $values[$j][\"val2\"] && $values[$i][\"val1\"] < $values[$j][\"val1\"] && $values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n+                    $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val2\"] > $values[$j][\"val1\"] && $values[$i][\"val2\"] < $values[$i][\"val1\"] && $values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n+                    $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val1\"] > $values[$i][\"val1\"] && $values[$j][\"val2\"] < $values[$i][\"val2\"] && $values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n+                    $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n+                }\r\n+            }\r\n+        }\r\n+        return $res;\r\n+    }\r\n+\r\n+    public function getQuadratureSinistroso()\r\n+    {\r\n+        $values = $this->getValues();\r\n+        $max = count($values) - 1;\r\n+        $res = [];\r\n+        for ($i = 0; $i < $max; $i++) {\r\n+            for ($j = $i + 1; $j <= $max; $j++) {\r\n+                if ($this->isotopi && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"])) {\r\n+                    continue;\r\n+                }\r\n+                if ($values[$i][\"val1\"] > $values[$i][\"val2\"] && $values[$j][\"val1\"] < $values[$j][\"val2\"] && $values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$i][\"val2\"] > $values[$j][\"val2\"] && $values[$i][\"val1\"] < $values[$j][\"val1\"] && $values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val2\"] > $values[$j][\"val1\"] && $values[$i][\"val2\"] < $values[$i][\"val1\"] && $values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val1\"] > $values[$i][\"val1\"] && $values[$j][\"val2\"] < $values[$i][\"val2\"] && $values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+            }\r\n+        }\r\n+        return $res;\r\n+    }\r\n+\r\n+    public function getQuadratureDestroso()\r\n+    {\r\n+        $values = $this->getValues();\r\n+        $max = count($values) - 1;\r\n+        $res = [];\r\n+        for ($i = 0; $i < $max; $i++) {\r\n+            for ($j = $i + 1; $j <= $max; $j++) {\r\n+                if ($this->isotopi && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"])) {\r\n+                    continue;\r\n+                }\r\n+                if ($values[$i][\"val1\"] < $values[$i][\"val2\"] && $values[$j][\"val1\"] > $values[$j][\"val2\"] && $values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$i][\"val2\"] < $values[$j][\"val2\"] && $values[$i][\"val1\"] > $values[$j][\"val1\"] && $values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val2\"] < $values[$j][\"val1\"] && $values[$i][\"val2\"] > $values[$i][\"val1\"] && $values[$i][\"val1\"] > $values[$j][\"val2\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+                if ($values[$j][\"val1\"] < $values[$i][\"val1\"] && $values[$j][\"val2\"] > $values[$i][\"val2\"] && $values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n+                    $this->addValue($res, $values[$i], $values[$j]);\r\n+                }\r\n+            }\r\n+        }\r\n+        return $res;\r\n+    }\r\n+\r\n+    private function addValue(&$var, $tmp1, $tmp2)\r\n+    {\r\n+        $tmpLG = [$tmp1[\"val1\"], $tmp1[\"val2\"], $tmp2[\"val1\"], $tmp2[\"val2\"]];\r\n+        $lower = $this->getLower($tmpLG);\r\n+        $greater = $this->getLower($tmpLG);\r\n+        $var[] = [\r\n+            \"ruota_1\" => $tmp1[\"ruota\"],\r\n+            \"distanza_1\" => $tmp1[\"distanza\"],\r\n+            \"val1_1\" => $tmp1[\"val1\"],\r\n+            \"val2_1\" => $tmp1[\"val2\"],\r\n+            \"trip_1\" => $this->getTripla($tmp1[\"val1\"]) . \"-\" . $this->getTripla($tmp1[\"val2\"]),\r\n+            \"somma_1\" => $this->getRaddoppio($tmp1[\"val1\"] + $tmp1[\"val2\"]),\r\n+            \"estrazione_1\" => $tmp1[\"estrazione\"],\r\n+            \"data_1\" => $tmp1[\"data\"],\r\n+            \"ruota_2\" => $tmp2[\"ruota\"],\r\n+            \"distanza_2\" => $tmp2[\"distanza\"],\r\n+            \"val1_2\" => $tmp2[\"val1\"],\r\n+            \"val2_2\" => $tmp2[\"val2\"],\r\n+            \"trip_2\" => $this->getTripla($tmp2[\"val1\"]) . \"-\" . $this->getTripla($tmp2[\"val2\"]),\r\n+            \"somma_2\" => $this->getRaddoppio($tmp2[\"val1\"] + $tmp2[\"val2\"]),\r\n+            \"estrazione_2\" => $tmp2[\"estrazione\"],\r\n+            \"data_2\" => $tmp2[\"data\"],\r\n+            \"somma_comune\" => $this->getRaddoppio($tmp2[\"val1\"] + $tmp1[\"val1\"]),\r\n+            \"somma_diag_1\" => $this->getRaddoppio($tmp1[\"val2\"] + $tmp2[\"val1\"]),\r\n+            \"somma_diag_2\" => $this->getRaddoppio($tmp1[\"val1\"] + $tmp2[\"val2\"]),\r\n+            \"raddoppio_somma_comune\" => $this->getRaddoppio($this->getRaddoppio($tmp2[\"val1\"] + $tmp1[\"val1\"]) * 2),\r\n+            \"diagonale\" => $this->getDiagonale($tmp2[\"val2\"], $tmp1[\"val1\"]),\r\n+            \"sopra\" => $this->calolaLati($tmp1[\"val1\"], $tmp1[\"val2\"], $lower, $greater),\r\n+            \"destra\" => $this->calolaLati($tmp1[\"val2\"], $tmp2[\"val2\"], $lower, $greater),\r\n+            \"sotto\" => $this->calolaLati($tmp2[\"val1\"], $tmp2[\"val2\"], $lower, $greater),\r\n+            \"sinistra\" => $this->calolaLati($tmp1[\"val1\"], $tmp2[\"val1\"], $lower, $greater)\r\n+        ];\r\n+    }\r\n+\r\n+    private function calolaLati($v1, $v2, $p, $g)\r\n+    {\r\n+        if ($v1 > $v2) {\r\n+            if ($v1 == $g && $v2 == $p)\r\n+                return ($v2 + 90) - $v1;\r\n+            else\r\n+                return $v1 - $v2;\r\n+        } else {\r\n+            if ($v2 == $g && $v1 == $p)\r\n+                return ($v1 + 90) - $v2;\r\n+            else\r\n+                return $v2 - $v1;\r\n+        }\r\n+    }\r\n+\r\n+    private function getDiagonale($val1, $val2)\r\n+    {\r\n+        $res = abs($val1 - $val2);\r\n+        return ($res > 45) ? 90 - $res : $res;\r\n+    }\r\n+\r\n+    private function getRaddoppio($val)\r\n+    {\r\n+        return ($val > 90) ? $val - 90 : $val;\r\n+    }\r\n+\r\n+    private function getTripla($val)\r\n+    {\r\n+        $value = isset($val[1]) ? $val[1] + $val[0] : $val[0];\r\n+        if ($value > 9) $value -= 9;\r\n+        return $value;\r\n+    }\r\n+\r\n+    private function getLower($tmp)\r\n+    {\r\n+        $res = $tmp[0];\r\n+        for ($i = 1; $i < 4; $i++) {\r\n+            if ($tmp[$i] < $res)\r\n+                $res = $tmp[$i];\r\n+        }\r\n+        return $res;\r\n+    }\r\n+\r\n+    private function getGreater($tmp)\r\n+    {\r\n+        $res = $tmp[0];\r\n+        for ($i = 1; $i < 4; $i++) {\r\n+            if ($tmp[$i] > $res)\r\n+                $res = $tmp[$i];\r\n+        }\r\n+        return $res;\r\n+    }\r\n+\r\n+    private function getValues()\r\n+    {\r\n+        $dbm = new DBM();\r\n+        return $dbm->read($this->query);\r\n+    }\r\n+\r\n+    private function generateQuery()\r\n+    {\r\n+        $sql = \"SELECT * FROM quad$this->year\";\r\n+        $where = [];\r\n+        if ($this->distanza != \"*\") {\r\n+            $distanze = array_map(function($k) {\r\n+                return \"'$k'\";\r\n+            }, (array)$this->distanza);\r\n+            $where[] = \"distanza IN (\" . implode(',', $distanze) . \")\";\r\n+        }\r\n+        if ($this->tripla != \"*\") {\r\n+            $where[] = \"tripla = '$this->tripla'\";\r\n+        }\r\n+        if (count($where) > 0) {\r\n+            $sql .= \" WHERE \" . implode(' AND ', $where);\r\n+        }\r\n+        $this->query = $sql;\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759225722509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,269 +233,6 @@\n             $sql .= \" WHERE \" . implode(' AND ', $where);\r\n         }\r\n         $this->query = $sql;\r\n     }\r\n-}\n-<?php\r\n-class Quadrature\r\n-{\r\n-    private $year;\r\n-    private $distanza;\r\n-    private $tripla;\r\n-    private $isotopi;\r\n-    private $query;\r\n-public function __construct($year, $distanza, $tripla, $isotopi = false)\r\n-{\r\n-    $this->year = $year;\r\n-    $this->distanza = $distanza;\r\n-    $this->tripla = $tripla;\r\n-    $this->isotopi = $isotopi;\r\n-    $this->generateQuery();\r\n }\r\n-    public function getQuadrature()\r\n-    {\r\n-        $values = $this->getValues();\r\n-        $max = count($values) - 1;\r\n-        $res = array();\r\n-        $res[\"destroso\"] = array();\r\n-        $res[\"sinistroso\"] = array();\r\n-        for ($i = 0; $i < $max; $i++) {\r\n-            for ($j = ($i + 1); $j < $max + 1; $j++) {\r\n-                if (($this->isotopi == true) && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"]))\r\n-                    continue;\r\n-                if ($values[$i][\"val1\"] < $values[$i][\"val2\"]) {\r\n-                    if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n-                        if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n-                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$i][\"val2\"] < $values[$j][\"val2\"]) {\r\n-                    if ($values[$i][\"val1\"] > $values[$j][\"val1\"]) {\r\n-                        if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n-                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val2\"] < $values[$j][\"val1\"]) {\r\n-                    if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n-                        if ($values[$i][\"val1\"] > $values[$j][\"val2\"]) {\r\n-                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val1\"] < $values[$i][\"val1\"]) {\r\n-                    if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n-                        if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n-                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$i][\"val1\"] > $values[$i][\"val2\"]) {\r\n-                    if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n-                        if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n-                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$i][\"val2\"] > $values[$j][\"val2\"]) {\r\n-                    if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n-                        if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n-                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val2\"] > $values[$j][\"val1\"]) {\r\n-                    if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n-                        if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n-                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val1\"] > $values[$i][\"val1\"]) {\r\n-                    if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n-                        if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n-                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        return $res;\r\n-    }\r\n-    public function getQuadratureSinistroso()\r\n-    {\r\n-        $values = $this->getValues();\r\n-        $max = count($values) - 1;\r\n-        $res = array();\r\n-        $res = array();\r\n-        for ($i = 0; $i < $max; $i++) {\r\n-            for ($j = ($i + 1); $j < $max + 1; $j++) {\r\n-                if (($this->isotopi == true) && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"]))\r\n-                    continue;\r\n-                if ($values[$i][\"val1\"] > $values[$i][\"val2\"]) {\r\n-                    if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n-                        if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$i][\"val2\"] > $values[$j][\"val2\"]) {\r\n-                    if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n-                        if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val2\"] > $values[$j][\"val1\"]) {\r\n-                    if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n-                        if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val1\"] > $values[$i][\"val1\"]) {\r\n-                    if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n-                        if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        return $res;\r\n-    }\r\n-    public function getQuadratureDestroso()\r\n-    {\r\n-        $values = $this->getValues();\r\n-        $max = count($values) - 1;\r\n-        $res = array();\r\n-        $res = array();\r\n-        for ($i = 0; $i < $max; $i++) {\r\n-            for ($j = ($i + 1); $j < $max + 1; $j++) {\r\n-                if (($this->isotopi == true) && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"]))\r\n-                    continue;\r\n-                if ($values[$i][\"val1\"] < $values[$i][\"val2\"]) {\r\n-                    if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n-                        if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$i][\"val2\"] < $values[$j][\"val2\"]) {\r\n-                    if ($values[$i][\"val1\"] > $values[$j][\"val1\"]) {\r\n-                        if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val2\"] < $values[$j][\"val1\"]) {\r\n-                    if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n-                        if ($values[$i][\"val1\"] > $values[$j][\"val2\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                if ($values[$j][\"val1\"] < $values[$i][\"val1\"]) {\r\n-                    if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n-                        if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n-                            $this->addValue($res, $values[$i], $values[$j]);\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        return $res;\r\n-    }\r\n-    private function addValue(&$var, $tmp1, $tmp2)\r\n-    {\r\n-        $tmpLG = array($tmp1[\"val1\"], $tmp1[\"val2\"], $tmp2[\"val1\"], $tmp2[\"val2\"]);\r\n-        $lower = $this->getLower($tmpLG);\r\n-        $greater = $this->getLower($tmpLG);\r\n-        $var[] = array(\"ruota_1\" => $tmp1[\"ruota\"], \"distanza_1\" => $tmp1[\"distanza\"], \"val1_1\" => $tmp1[\"val1\"], \"val2_1\" => $tmp1[\"val2\"], \"trip_1\" => $this->getTripla($tmp1[\"val1\"]) . \"-\" . $this->getTripla($tmp1[\"val2\"]), \"somma_1\" => $this->getRaddoppio($tmp1[\"val1\"] + $tmp1[\"val2\"]), \"estrazione_1\" => $tmp1[\"estrazione\"], \"data_1\" => $tmp1[\"data\"], \"ruota_2\" => $tmp2[\"ruota\"], \"distanza_2\" => $tmp2[\"distanza\"], \"val1_2\" => $tmp2[\"val1\"], \"val2_2\" => $tmp2[\"val2\"], \"trip_2\" => $this->getTripla($tmp2[\"val1\"]) . \"-\" . $this->getTripla($tmp2[\"val2\"]), \"somma_2\" => $this->getRaddoppio($tmp2[\"val1\"] + $tmp2[\"val2\"]), \"estrazione_2\" => $tmp2[\"estrazione\"], \"data_2\" => $tmp2[\"data\"], \"somma_comune\" => $this->getRaddoppio($tmp2[\"val1\"] + $tmp1[\"val1\"]), \"somma_diag_1\" => $this->getRaddoppio($tmp1[\"val2\"] + $tmp2[\"val1\"]), \"somma_diag_2\" => $this->getRaddoppio($tmp1[\"val1\"] + $tmp2[\"val2\"]), \"raddoppio_somma_comune\" => $this->getRaddoppio($this->getRaddoppio($tmp2[\"val1\"] + $tmp1[\"val1\"]) * 2), \"diagonale\" => $this->getDiagonale($tmp2[\"val2\"], $tmp1[\"val1\"]), \"sopra\" => $this->calolaLati($tmp1[\"val1\"], $tmp1[\"val2\"], $lower, $greater), \"destra\" => $this->calolaLati($tmp1[\"val2\"], $tmp2[\"val2\"], $lower, $greater), \"sotto\" => $this->calolaLati($tmp2[\"val1\"], $tmp2[\"val2\"], $lower, $greater), \"sinistra\" => $this->calolaLati($tmp1[\"val1\"], $tmp2[\"val1\"], $lower, $greater));\r\n-    }\r\n-    private function calolaLati($v1, $v2, $p, $g)\r\n-    {\r\n-        if ($v1 > $v2) {\r\n-            if ($v1 == $g && $v2 == $p)\r\n-                return ($v2 + 90) - $v1;\r\n-            else\r\n-                return $v1 - $v2;\r\n-        } else {\r\n-            if ($v2 == $g && $v1 == $p)\r\n-                return ($v1 + 90) - $v2;\r\n-            else\r\n-                return $v2 - $v1;\r\n-        }\r\n-    }\r\n-    private function getDiagonale($val1, $val2)\r\n-    {\r\n-        if ($val1 > $val2)\r\n-            $res = $val1 - $val2;\r\n-        else\r\n-            $res = $val2 - $val1;\r\n-        if ($res > 45)\r\n-            return 90 - $res;\r\n-        else\r\n-            return $res;\r\n-    }\r\n-    private function getRaddoppio($val)\r\n-    {\r\n-        if ($val > 90)\r\n-            return $val - 90;\r\n-        else\r\n-            return $val;\r\n-    }\r\n-    private function getTripla($val)\r\n-    {\r\n-        if (isset($val[1]))\r\n-            $value = $val[1] + $val[0];\r\n-        else\r\n-            $value = $val[0];\r\n-        if ($value > 9)\r\n-            $value -= 9;\r\n-        return $value;\r\n-    }\r\n-    private function getLower($tmp)\r\n-    {\r\n-        $res = $tmp[0];\r\n-        for ($i = 1; $i < 4; $i++) {\r\n-            if ($tmp[$i] < $res)\r\n-                $res = $tmp[$i];\r\n-        }\r\n-        return $res;\r\n-    }\r\n-    private function getGreater($tmp)\r\n-    {\r\n-        $res = $tmp[0];\r\n-        for ($i = 1; $i < 4; $i++) {\r\n-            if ($tmp[$i] > $res)\r\n-                $res = $tmp[$i];\r\n-        }\r\n-        return $res;\r\n-    }\r\n-    private function getValues()\r\n-    {\r\n-        $dbm = new DBM();\r\n-        return $dbm->read($this->query);\r\n-    }\r\n-  private function generateQuery()\r\n-{\r\n-    $sql = \"SELECT * FROM quad$this->year\";\r\n-    if (($this->distanza != \"*\") || ($this->tripla != \"*\")) {\r\n-        $sql .= \" WHERE\";\r\n-    }\r\n-    if ($this->distanza != \"*\") {\r\n-        $sql .= \" distanza IN (\";\r\n-        foreach ($this->distanza as $key)\r\n-            $sql .= \"'$key',\";\r\n-        $sql = substr($sql, 0, strlen($sql) - 1) . \")\";\r\n-    }\r\n-    if ($this->tripla != \"*\") {\r\n-        if ($this->distanza != \"*\")\r\n-            $sql .= \" AND tripla = '$this->tripla'\";\r\n-        else\r\n-            $sql .= \" tripla = '$this->tripla'\";\r\n-    }\r\n-    $this->query = $sql;\r\n-}\r\n-} ?>\n\\ No newline at end of file\n+?>\r\n"
                },
                {
                    "date": 1759225743532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n <?php\r\n-<?php\r\n \r\n class Quadrature\r\n {\r\n     private $year;\r\n"
                },
                {
                    "date": 1759226045744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,10 @@\n     }\r\n \r\n     private function getTripla($val)\r\n     {\r\n-        $value = isset($val[1]) ? $val[1] + $val[0] : $val[0];\r\n+        $val = (string)$val;\r\n+        $value = (strlen($val) > 1) ? ((int)$val[1] + (int)$val[0]) : (int)$val[0];\r\n         if ($value > 9) $value -= 9;\r\n         return $value;\r\n     }\r\n \r\n"
                }
            ],
            "date": 1759219719974,
            "name": "Commit-0",
            "content": "<?php\r\nclass Quadrature\r\n{\r\n    private $year;\r\n    private $distanza;\r\n    private $tripla;\r\n    private $isotopi;\r\n    private $query;\r\npublic function __construct($year, $distanza, $tripla, $isotopi = false)\r\n{\r\n    $this->year = $year;\r\n    $this->distanza = $distanza;\r\n    $this->tripla = $tripla;\r\n    $this->isotopi = $isotopi;\r\n    $this->generateQuery();\r\n}\r\n    public function getQuadrature()\r\n    {\r\n        $values = $this->getValues();\r\n        $max = count($values) - 1;\r\n        $res = array();\r\n        $res[\"destroso\"] = array();\r\n        $res[\"sinistroso\"] = array();\r\n        for ($i = 0; $i < $max; $i++) {\r\n            for ($j = ($i + 1); $j < $max + 1; $j++) {\r\n                if (($this->isotopi == true) && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"]))\r\n                    continue;\r\n                if ($values[$i][\"val1\"] < $values[$i][\"val2\"]) {\r\n                    if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n                        if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$i][\"val2\"] < $values[$j][\"val2\"]) {\r\n                    if ($values[$i][\"val1\"] > $values[$j][\"val1\"]) {\r\n                        if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val2\"] < $values[$j][\"val1\"]) {\r\n                    if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n                        if ($values[$i][\"val1\"] > $values[$j][\"val2\"]) {\r\n                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val1\"] < $values[$i][\"val1\"]) {\r\n                    if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n                        if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n                            $this->addValue($res[\"destroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$i][\"val1\"] > $values[$i][\"val2\"]) {\r\n                    if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n                        if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$i][\"val2\"] > $values[$j][\"val2\"]) {\r\n                    if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n                        if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val2\"] > $values[$j][\"val1\"]) {\r\n                    if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n                        if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val1\"] > $values[$i][\"val1\"]) {\r\n                    if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n                        if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n                            $this->addValue($res[\"sinistroso\"], $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return $res;\r\n    }\r\n    public function getQuadratureSinistroso()\r\n    {\r\n        $values = $this->getValues();\r\n        $max = count($values) - 1;\r\n        $res = array();\r\n        $res = array();\r\n        for ($i = 0; $i < $max; $i++) {\r\n            for ($j = ($i + 1); $j < $max + 1; $j++) {\r\n                if (($this->isotopi == true) && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"]))\r\n                    continue;\r\n                if ($values[$i][\"val1\"] > $values[$i][\"val2\"]) {\r\n                    if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n                        if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$i][\"val2\"] > $values[$j][\"val2\"]) {\r\n                    if ($values[$i][\"val1\"] < $values[$j][\"val1\"]) {\r\n                        if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val2\"] > $values[$j][\"val1\"]) {\r\n                    if ($values[$i][\"val2\"] < $values[$i][\"val1\"]) {\r\n                        if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val1\"] > $values[$i][\"val1\"]) {\r\n                    if ($values[$j][\"val2\"] < $values[$i][\"val2\"]) {\r\n                        if ($values[$j][\"val1\"] < $values[$j][\"val2\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return $res;\r\n    }\r\n    public function getQuadratureDestroso()\r\n    {\r\n        $values = $this->getValues();\r\n        $max = count($values) - 1;\r\n        $res = array();\r\n        $res = array();\r\n        for ($i = 0; $i < $max; $i++) {\r\n            for ($j = ($i + 1); $j < $max + 1; $j++) {\r\n                if (($this->isotopi == true) && ($values[$i][\"distanza\"] != $values[$j][\"distanza\"]))\r\n                    continue;\r\n                if ($values[$i][\"val1\"] < $values[$i][\"val2\"]) {\r\n                    if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n                        if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$i][\"val2\"] < $values[$j][\"val2\"]) {\r\n                    if ($values[$i][\"val1\"] > $values[$j][\"val1\"]) {\r\n                        if ($values[$j][\"val1\"] > $values[$j][\"val2\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val2\"] < $values[$j][\"val1\"]) {\r\n                    if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n                        if ($values[$i][\"val1\"] > $values[$j][\"val2\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n                if ($values[$j][\"val1\"] < $values[$i][\"val1\"]) {\r\n                    if ($values[$j][\"val2\"] > $values[$i][\"val2\"]) {\r\n                        if ($values[$i][\"val2\"] > $values[$i][\"val1\"]) {\r\n                            $this->addValue($res, $values[$i], $values[$j]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return $res;\r\n    }\r\n    private function addValue(&$var, $tmp1, $tmp2)\r\n    {\r\n        $tmpLG = array($tmp1[\"val1\"], $tmp1[\"val2\"], $tmp2[\"val1\"], $tmp2[\"val2\"]);\r\n        $lower = $this->getLower($tmpLG);\r\n        $greater = $this->getLower($tmpLG);\r\n        $var[] = array(\"ruota_1\" => $tmp1[\"ruota\"], \"distanza_1\" => $tmp1[\"distanza\"], \"val1_1\" => $tmp1[\"val1\"], \"val2_1\" => $tmp1[\"val2\"], \"trip_1\" => $this->getTripla($tmp1[\"val1\"]) . \"-\" . $this->getTripla($tmp1[\"val2\"]), \"somma_1\" => $this->getRaddoppio($tmp1[\"val1\"] + $tmp1[\"val2\"]), \"estrazione_1\" => $tmp1[\"estrazione\"], \"data_1\" => $tmp1[\"data\"], \"ruota_2\" => $tmp2[\"ruota\"], \"distanza_2\" => $tmp2[\"distanza\"], \"val1_2\" => $tmp2[\"val1\"], \"val2_2\" => $tmp2[\"val2\"], \"trip_2\" => $this->getTripla($tmp2[\"val1\"]) . \"-\" . $this->getTripla($tmp2[\"val2\"]), \"somma_2\" => $this->getRaddoppio($tmp2[\"val1\"] + $tmp2[\"val2\"]), \"estrazione_2\" => $tmp2[\"estrazione\"], \"data_2\" => $tmp2[\"data\"], \"somma_comune\" => $this->getRaddoppio($tmp2[\"val1\"] + $tmp1[\"val1\"]), \"somma_diag_1\" => $this->getRaddoppio($tmp1[\"val2\"] + $tmp2[\"val1\"]), \"somma_diag_2\" => $this->getRaddoppio($tmp1[\"val1\"] + $tmp2[\"val2\"]), \"raddoppio_somma_comune\" => $this->getRaddoppio($this->getRaddoppio($tmp2[\"val1\"] + $tmp1[\"val1\"]) * 2), \"diagonale\" => $this->getDiagonale($tmp2[\"val2\"], $tmp1[\"val1\"]), \"sopra\" => $this->calolaLati($tmp1[\"val1\"], $tmp1[\"val2\"], $lower, $greater), \"destra\" => $this->calolaLati($tmp1[\"val2\"], $tmp2[\"val2\"], $lower, $greater), \"sotto\" => $this->calolaLati($tmp2[\"val1\"], $tmp2[\"val2\"], $lower, $greater), \"sinistra\" => $this->calolaLati($tmp1[\"val1\"], $tmp2[\"val1\"], $lower, $greater));\r\n    }\r\n    private function calolaLati($v1, $v2, $p, $g)\r\n    {\r\n        if ($v1 > $v2) {\r\n            if ($v1 == $g && $v2 == $p)\r\n                return ($v2 + 90) - $v1;\r\n            else\r\n                return $v1 - $v2;\r\n        } else {\r\n            if ($v2 == $g && $v1 == $p)\r\n                return ($v1 + 90) - $v2;\r\n            else\r\n                return $v2 - $v1;\r\n        }\r\n    }\r\n    private function getDiagonale($val1, $val2)\r\n    {\r\n        if ($val1 > $val2)\r\n            $res = $val1 - $val2;\r\n        else\r\n            $res = $val2 - $val1;\r\n        if ($res > 45)\r\n            return 90 - $res;\r\n        else\r\n            return $res;\r\n    }\r\n    private function getRaddoppio($val)\r\n    {\r\n        if ($val > 90)\r\n            return $val - 90;\r\n        else\r\n            return $val;\r\n    }\r\n    private function getTripla($val)\r\n    {\r\n        if (isset($val[1]))\r\n            $value = $val[1] + $val[0];\r\n        else\r\n            $value = $val[0];\r\n        if ($value > 9)\r\n            $value -= 9;\r\n        return $value;\r\n    }\r\n    private function getLower($tmp)\r\n    {\r\n        $res = $tmp[0];\r\n        for ($i = 1; $i < 4; $i++) {\r\n            if ($tmp[$i] < $res)\r\n                $res = $tmp[$i];\r\n        }\r\n        return $res;\r\n    }\r\n    private function getGreater($tmp)\r\n    {\r\n        $res = $tmp[0];\r\n        for ($i = 1; $i < 4; $i++) {\r\n            if ($tmp[$i] > $res)\r\n                $res = $tmp[$i];\r\n        }\r\n        return $res;\r\n    }\r\n    private function getValues()\r\n    {\r\n        $dbm = new DBM();\r\n        return $dbm->read($this->query);\r\n    }\r\n    private function generateQuery()\r\n    {\r\n        $sql = \"SELECT * FROM quad$this->year\";\r\n        if (($this->distanza != \"*\") || ($this->tripla != \"*\")) {\r\n            $sql .= \" WHERE\";\r\n        }\r\n        if ($this->distanza != \"*\") {\r\n            $sql .= \" distanza IN (\";\r\n            foreach ($this->distanza as $key)\r\n                $sql .= \"\\'$key',\";\r\n            $sql = substr($sql, 0, strlen($sql) - 1) . \")\";\r\n        }\r\n        if ($this->tripla != \"*\") {\r\n            if ($this->distanza != \"*\")\r\n                $sql .= \" AND tripla = \\'$this->tripla\\'\";\r\n            else\r\n                $sql .= \" tripla = '$this->tripla'\";\r\n        }\r\n        $this->query = $sql;\r\n    }\r\n} ?>"
        }
    ]
}